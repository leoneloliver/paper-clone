{"remainingRequest":"/Users/loliveira/Desktop/paper-clone/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/loliveira/Desktop/paper-clone/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/loliveira/Desktop/paper-clone/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/loliveira/Desktop/paper-clone/src/components/Messages.vue?vue&type=template&id=4798c908&scoped=true&","dependencies":[{"path":"/Users/loliveira/Desktop/paper-clone/src/components/Messages.vue","mtime":1632782646034},{"path":"/Users/loliveira/Desktop/paper-clone/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/loliveira/Desktop/paper-clone/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/loliveira/Desktop/paper-clone/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/loliveira/Desktop/paper-clone/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJmbGV4IGZsZXgtY29sIG92ZXJmbG93LXktYXV0byBtYi0zIiB9LAogICAgICBfdm0uX2woX3ZtLm1lc3NhZ2VzLCBmdW5jdGlvbihtZXNzYWdlKSB7CiAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleTogbWVzc2FnZS5jb250ZW50LAogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAicC00IGRhcms6dGV4dC1ncmF5LTMwMCBiZy1ncmF5LTEwMCBkYXJrOmJnLWdyYXktOTAwIGhvdmVyOmJnLWdyYXktMTAwIGRhcms6aG92ZXI6YmctZ3JheS05MDAgZmxleCBqdXN0aWZ5LWVuZCIKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiLW10LTMgbXItMiIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgInB5LTIgYmctYmx1ZS04MDAgdGV4dC13aGl0ZSByb3VuZGVkLXhsICBweS0zIHB4LTYgcm91bmRlZC1ibC1mdWxsIHJvdW5kZWQtdC1mdWxsIHNoYWRvdy1tZCB0eXBlLWJnIiwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKG1lc3NhZ2UuY29udGVudCkgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAidGV4dC1zbSB0ZXh0LWRhcmsgbWwtMiBtZDpibG9jayBoaWRkZW4gdGV4dC1yaWdodCBmcyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhfdm0udGltZU5vdygpKSArICIgIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4LW5vbmUgbXItNCIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImgtMTIgdy0xMiByb3VuZGVkLWZ1bGwgZmxleC1ub25lIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogIiIgKyBtZXNzYWdlLnNyYyB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIH0pLAogICAgICAwCiAgICApLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbnNldC14LTAgYm90dG9tLTAgZml4ZWQgYmxvY2sgdy1mdWxsIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JpZCBncmlkLWNvbHMtNSBnYXAtMiAiIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAibWQ6Y29sLXN0YXJ0LTIgbWQ6Y29sLWVuZC01IGNvbC1zdGFydC0xIGNvbC1lbmQtNiBiZy1ncmF5LTEwMCBkYXJrOmJnLWdyYXktOTAwIHBiLTUgbWItMCIKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZm9ybSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidy1mdWxsIHB4LTQgcmVsYXRpdmUiLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIHN1Ym1pdDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5hZGROZXdNZXNzYWdlLmFwcGx5KG51bGwsIGFyZ3VtZW50cykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tZXNzYWdlLmNvbnRlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJtZXNzYWdlLmNvbnRlbnQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICJtdC0yIHBiLTQgdy1mdWxsIGZvY3VzOm91dGxpbmUtbm9uZSBkYXJrOmJnLWdyYXktODAwIGRhcms6dGV4dC1ncmF5LTMwMCBiZy13aGl0ZSBib3JkZXIgaC0xNiBib3JkZXItZ3JheS0yMDAgZGFyazpib3JkZXItZ3JheS02MDAgcm91bmRlZCBwLTIgcHQtMCIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBwbGFjZWhvbGRlcjogIlR5cGUgeW91ciBtZXNzYWdlISIgfSwKICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm1lc3NhZ2UuY29udGVudCB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5tZXNzYWdlLCAiY29udGVudCIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGlkZGVuIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAic3VibWl0IiwgdmFsdWU6ICJTdWJtaXQiIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX20oMCkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxleCBqdXN0aWZ5LWVuZCB3LWZ1bGwgcHItNSBtdC0zIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJidXR0b24iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAidGV4dC13aGl0ZSBiZy1wYXBlciByb3VuZGVkLW1kIGZvbnQtc2VtaWJvbGQgZm9jdXM6b3V0bGluZS1ub25lIHAtMiBweC01IGhvdmVyOmJnLWJsdWUtODAwIG1yLTIgdHlwZS1iZyIKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZhIGZhLXBhcGVyY2xpcCB0ZXh0LXdoaXRlIiwKICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KCIgU2VuZCBmaWxlICIpCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgInRleHQtd2hpdGUgYmctcGFwZXIgcm91bmRlZC1tZCBmb250LXNlbWlib2xkIGZvY3VzOm91dGxpbmUtbm9uZSAgcC0yIHB4LTUgaG92ZXI6YmctYmx1ZS04MDAgdHlwZS1iZyIKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImZhIGZhLXBlbmNpbCB0ZXh0LXdoaXRlIiwKICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KCIgRHJhdyAiKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoImkiLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAiZmEgZmEtc21pbGUtbyBhYnNvbHV0ZSByaWdodCBtdC0xMiBzbWlsZSBkYXJrOnRleHQtZ3JheS0yMDAiLAogICAgICAgIGF0dHJzOiB7ICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgIH0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}